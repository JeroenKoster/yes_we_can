# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rfid_msg/PDO1.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PDO1(genpy.Message):
  _md5sum = "530464652e88ccd5dd9df1e0e69d16b1"
  _type = "rfid_msg/PDO1"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool tagInField
bool codeOk
bool xyDeviationDetermined
bool centerPuls
bool positionError
bool positionEstimate
bool fatalError
bool antennaStarted
float32 rfidCode
float32 xDeviation
float32 yDeviation
"""
  __slots__ = ['tagInField','codeOk','xyDeviationDetermined','centerPuls','positionError','positionEstimate','fatalError','antennaStarted','rfidCode','xDeviation','yDeviation']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tagInField,codeOk,xyDeviationDetermined,centerPuls,positionError,positionEstimate,fatalError,antennaStarted,rfidCode,xDeviation,yDeviation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PDO1, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tagInField is None:
        self.tagInField = False
      if self.codeOk is None:
        self.codeOk = False
      if self.xyDeviationDetermined is None:
        self.xyDeviationDetermined = False
      if self.centerPuls is None:
        self.centerPuls = False
      if self.positionError is None:
        self.positionError = False
      if self.positionEstimate is None:
        self.positionEstimate = False
      if self.fatalError is None:
        self.fatalError = False
      if self.antennaStarted is None:
        self.antennaStarted = False
      if self.rfidCode is None:
        self.rfidCode = 0.
      if self.xDeviation is None:
        self.xDeviation = 0.
      if self.yDeviation is None:
        self.yDeviation = 0.
    else:
      self.tagInField = False
      self.codeOk = False
      self.xyDeviationDetermined = False
      self.centerPuls = False
      self.positionError = False
      self.positionEstimate = False
      self.fatalError = False
      self.antennaStarted = False
      self.rfidCode = 0.
      self.xDeviation = 0.
      self.yDeviation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B3f().pack(_x.tagInField, _x.codeOk, _x.xyDeviationDetermined, _x.centerPuls, _x.positionError, _x.positionEstimate, _x.fatalError, _x.antennaStarted, _x.rfidCode, _x.xDeviation, _x.yDeviation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.tagInField, _x.codeOk, _x.xyDeviationDetermined, _x.centerPuls, _x.positionError, _x.positionEstimate, _x.fatalError, _x.antennaStarted, _x.rfidCode, _x.xDeviation, _x.yDeviation,) = _get_struct_8B3f().unpack(str[start:end])
      self.tagInField = bool(self.tagInField)
      self.codeOk = bool(self.codeOk)
      self.xyDeviationDetermined = bool(self.xyDeviationDetermined)
      self.centerPuls = bool(self.centerPuls)
      self.positionError = bool(self.positionError)
      self.positionEstimate = bool(self.positionEstimate)
      self.fatalError = bool(self.fatalError)
      self.antennaStarted = bool(self.antennaStarted)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B3f().pack(_x.tagInField, _x.codeOk, _x.xyDeviationDetermined, _x.centerPuls, _x.positionError, _x.positionEstimate, _x.fatalError, _x.antennaStarted, _x.rfidCode, _x.xDeviation, _x.yDeviation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.tagInField, _x.codeOk, _x.xyDeviationDetermined, _x.centerPuls, _x.positionError, _x.positionEstimate, _x.fatalError, _x.antennaStarted, _x.rfidCode, _x.xDeviation, _x.yDeviation,) = _get_struct_8B3f().unpack(str[start:end])
      self.tagInField = bool(self.tagInField)
      self.codeOk = bool(self.codeOk)
      self.xyDeviationDetermined = bool(self.xyDeviationDetermined)
      self.centerPuls = bool(self.centerPuls)
      self.positionError = bool(self.positionError)
      self.positionEstimate = bool(self.positionEstimate)
      self.fatalError = bool(self.fatalError)
      self.antennaStarted = bool(self.antennaStarted)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B3f = None
def _get_struct_8B3f():
    global _struct_8B3f
    if _struct_8B3f is None:
        _struct_8B3f = struct.Struct("<8B3f")
    return _struct_8B3f

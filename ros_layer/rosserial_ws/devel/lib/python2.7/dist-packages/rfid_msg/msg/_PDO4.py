# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rfid_msg/PDO4.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PDO4(genpy.Message):
  _md5sum = "50aae4a0ce8f7819ec3249b06ed01686"
  _type = "rfid_msg/PDO4"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 accX
float32 accY
float32 accZ
bool posResult
bool error
bool inaccurate
bool analysisError
bool tdiffError
bool speedError
bool speedSignError
bool speedAccelerationError
bool posOutOfBoundsError
bool noResultError
bool positionResultFault
"""
  __slots__ = ['accX','accY','accZ','posResult','error','inaccurate','analysisError','tdiffError','speedError','speedSignError','speedAccelerationError','posOutOfBoundsError','noResultError','positionResultFault']
  _slot_types = ['float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       accX,accY,accZ,posResult,error,inaccurate,analysisError,tdiffError,speedError,speedSignError,speedAccelerationError,posOutOfBoundsError,noResultError,positionResultFault

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PDO4, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.accX is None:
        self.accX = 0.
      if self.accY is None:
        self.accY = 0.
      if self.accZ is None:
        self.accZ = 0.
      if self.posResult is None:
        self.posResult = False
      if self.error is None:
        self.error = False
      if self.inaccurate is None:
        self.inaccurate = False
      if self.analysisError is None:
        self.analysisError = False
      if self.tdiffError is None:
        self.tdiffError = False
      if self.speedError is None:
        self.speedError = False
      if self.speedSignError is None:
        self.speedSignError = False
      if self.speedAccelerationError is None:
        self.speedAccelerationError = False
      if self.posOutOfBoundsError is None:
        self.posOutOfBoundsError = False
      if self.noResultError is None:
        self.noResultError = False
      if self.positionResultFault is None:
        self.positionResultFault = False
    else:
      self.accX = 0.
      self.accY = 0.
      self.accZ = 0.
      self.posResult = False
      self.error = False
      self.inaccurate = False
      self.analysisError = False
      self.tdiffError = False
      self.speedError = False
      self.speedSignError = False
      self.speedAccelerationError = False
      self.posOutOfBoundsError = False
      self.noResultError = False
      self.positionResultFault = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f11B().pack(_x.accX, _x.accY, _x.accZ, _x.posResult, _x.error, _x.inaccurate, _x.analysisError, _x.tdiffError, _x.speedError, _x.speedSignError, _x.speedAccelerationError, _x.posOutOfBoundsError, _x.noResultError, _x.positionResultFault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.accX, _x.accY, _x.accZ, _x.posResult, _x.error, _x.inaccurate, _x.analysisError, _x.tdiffError, _x.speedError, _x.speedSignError, _x.speedAccelerationError, _x.posOutOfBoundsError, _x.noResultError, _x.positionResultFault,) = _get_struct_3f11B().unpack(str[start:end])
      self.posResult = bool(self.posResult)
      self.error = bool(self.error)
      self.inaccurate = bool(self.inaccurate)
      self.analysisError = bool(self.analysisError)
      self.tdiffError = bool(self.tdiffError)
      self.speedError = bool(self.speedError)
      self.speedSignError = bool(self.speedSignError)
      self.speedAccelerationError = bool(self.speedAccelerationError)
      self.posOutOfBoundsError = bool(self.posOutOfBoundsError)
      self.noResultError = bool(self.noResultError)
      self.positionResultFault = bool(self.positionResultFault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f11B().pack(_x.accX, _x.accY, _x.accZ, _x.posResult, _x.error, _x.inaccurate, _x.analysisError, _x.tdiffError, _x.speedError, _x.speedSignError, _x.speedAccelerationError, _x.posOutOfBoundsError, _x.noResultError, _x.positionResultFault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.accX, _x.accY, _x.accZ, _x.posResult, _x.error, _x.inaccurate, _x.analysisError, _x.tdiffError, _x.speedError, _x.speedSignError, _x.speedAccelerationError, _x.posOutOfBoundsError, _x.noResultError, _x.positionResultFault,) = _get_struct_3f11B().unpack(str[start:end])
      self.posResult = bool(self.posResult)
      self.error = bool(self.error)
      self.inaccurate = bool(self.inaccurate)
      self.analysisError = bool(self.analysisError)
      self.tdiffError = bool(self.tdiffError)
      self.speedError = bool(self.speedError)
      self.speedSignError = bool(self.speedSignError)
      self.speedAccelerationError = bool(self.speedAccelerationError)
      self.posOutOfBoundsError = bool(self.posOutOfBoundsError)
      self.noResultError = bool(self.noResultError)
      self.positionResultFault = bool(self.positionResultFault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f11B = None
def _get_struct_3f11B():
    global _struct_3f11B
    if _struct_3f11B is None:
        _struct_3f11B = struct.Struct("<3f11B")
    return _struct_3f11B

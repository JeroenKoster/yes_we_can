// Generated by gencpp from file rfid_msg/PDO4.msg
// DO NOT EDIT!


#ifndef RFID_MSG_MESSAGE_PDO4_H
#define RFID_MSG_MESSAGE_PDO4_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rfid_msg
{
template <class ContainerAllocator>
struct PDO4_
{
  typedef PDO4_<ContainerAllocator> Type;

  PDO4_()
    : accX(0.0)
    , accY(0.0)
    , accZ(0.0)
    , posResult(false)
    , error(false)
    , inaccurate(false)
    , analysisError(false)
    , tdiffError(false)
    , speedError(false)
    , speedSignError(false)
    , speedAccelerationError(false)
    , posOutOfBoundsError(false)
    , noResultError(false)
    , positionResultFault(false)  {
    }
  PDO4_(const ContainerAllocator& _alloc)
    : accX(0.0)
    , accY(0.0)
    , accZ(0.0)
    , posResult(false)
    , error(false)
    , inaccurate(false)
    , analysisError(false)
    , tdiffError(false)
    , speedError(false)
    , speedSignError(false)
    , speedAccelerationError(false)
    , posOutOfBoundsError(false)
    , noResultError(false)
    , positionResultFault(false)  {
  (void)_alloc;
    }



   typedef float _accX_type;
  _accX_type accX;

   typedef float _accY_type;
  _accY_type accY;

   typedef float _accZ_type;
  _accZ_type accZ;

   typedef uint8_t _posResult_type;
  _posResult_type posResult;

   typedef uint8_t _error_type;
  _error_type error;

   typedef uint8_t _inaccurate_type;
  _inaccurate_type inaccurate;

   typedef uint8_t _analysisError_type;
  _analysisError_type analysisError;

   typedef uint8_t _tdiffError_type;
  _tdiffError_type tdiffError;

   typedef uint8_t _speedError_type;
  _speedError_type speedError;

   typedef uint8_t _speedSignError_type;
  _speedSignError_type speedSignError;

   typedef uint8_t _speedAccelerationError_type;
  _speedAccelerationError_type speedAccelerationError;

   typedef uint8_t _posOutOfBoundsError_type;
  _posOutOfBoundsError_type posOutOfBoundsError;

   typedef uint8_t _noResultError_type;
  _noResultError_type noResultError;

   typedef uint8_t _positionResultFault_type;
  _positionResultFault_type positionResultFault;





  typedef boost::shared_ptr< ::rfid_msg::PDO4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rfid_msg::PDO4_<ContainerAllocator> const> ConstPtr;

}; // struct PDO4_

typedef ::rfid_msg::PDO4_<std::allocator<void> > PDO4;

typedef boost::shared_ptr< ::rfid_msg::PDO4 > PDO4Ptr;
typedef boost::shared_ptr< ::rfid_msg::PDO4 const> PDO4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rfid_msg::PDO4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rfid_msg::PDO4_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rfid_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rfid_msg': ['/home/marco/yes_we_can/ros_layer/rosserial_ws/src/rfid_msg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rfid_msg::PDO4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfid_msg::PDO4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfid_msg::PDO4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfid_msg::PDO4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfid_msg::PDO4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfid_msg::PDO4_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rfid_msg::PDO4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50aae4a0ce8f7819ec3249b06ed01686";
  }

  static const char* value(const ::rfid_msg::PDO4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50aae4a0ce8f7819ULL;
  static const uint64_t static_value2 = 0xec3249b06ed01686ULL;
};

template<class ContainerAllocator>
struct DataType< ::rfid_msg::PDO4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rfid_msg/PDO4";
  }

  static const char* value(const ::rfid_msg::PDO4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rfid_msg::PDO4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 accX\n\
float32 accY\n\
float32 accZ\n\
bool posResult\n\
bool error\n\
bool inaccurate\n\
bool analysisError\n\
bool tdiffError\n\
bool speedError\n\
bool speedSignError\n\
bool speedAccelerationError\n\
bool posOutOfBoundsError\n\
bool noResultError\n\
bool positionResultFault\n\
";
  }

  static const char* value(const ::rfid_msg::PDO4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rfid_msg::PDO4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accX);
      stream.next(m.accY);
      stream.next(m.accZ);
      stream.next(m.posResult);
      stream.next(m.error);
      stream.next(m.inaccurate);
      stream.next(m.analysisError);
      stream.next(m.tdiffError);
      stream.next(m.speedError);
      stream.next(m.speedSignError);
      stream.next(m.speedAccelerationError);
      stream.next(m.posOutOfBoundsError);
      stream.next(m.noResultError);
      stream.next(m.positionResultFault);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PDO4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rfid_msg::PDO4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rfid_msg::PDO4_<ContainerAllocator>& v)
  {
    s << indent << "accX: ";
    Printer<float>::stream(s, indent + "  ", v.accX);
    s << indent << "accY: ";
    Printer<float>::stream(s, indent + "  ", v.accY);
    s << indent << "accZ: ";
    Printer<float>::stream(s, indent + "  ", v.accZ);
    s << indent << "posResult: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.posResult);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "inaccurate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inaccurate);
    s << indent << "analysisError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.analysisError);
    s << indent << "tdiffError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tdiffError);
    s << indent << "speedError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speedError);
    s << indent << "speedSignError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speedSignError);
    s << indent << "speedAccelerationError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speedAccelerationError);
    s << indent << "posOutOfBoundsError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.posOutOfBoundsError);
    s << indent << "noResultError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.noResultError);
    s << indent << "positionResultFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.positionResultFault);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFID_MSG_MESSAGE_PDO4_H
